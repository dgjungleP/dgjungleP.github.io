<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>100DaysCode-Day01 再看RxJava</title>
      <link href="/2023/03/30/100dayscode-1/"/>
      <url>/2023/03/30/100dayscode-1/</url>
      
        <content type="html"><![CDATA[<p>在我的工作中，我使用最多的场景就是用 RxJava 帮助我处理异步任务的问题，所以对于 RxJava 的起步我应该是从<code>Flowable</code>开始切入的。那么这里就浅讲一下<code>Flowable</code>的使用方式（总的来说 RxJava 的几乎所有的<code>被观察者</code>都是这样创建的）。</p><blockquote><p>它可能不对，但是我确实是这样入坑的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFlowable</span><span class="params">()</span> &#123;</span><br><span class="line">    Flowable&lt;Integer&gt; flowable = Flowable.just(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了这样的一个简单的包含一个可被监控元素的 Flowable 的被监听者已经创建好了，当运行代码的时候，会发现什么也没有发生，是因为只有被监听者准备好了，他还没有被监听。所以我们就需要让他被监听起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFlowable</span><span class="params">()</span> &#123;</span><br><span class="line">    Flowable&lt;Integer&gt; flowable = Flowable.just(<span class="number">1</span>);</span><br><span class="line">    flowable.subscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样运行之后发现，还是什么变化也没有，是因为监听者并没有做任何的事情，那么就需要给他定制一个当监听到对应的数据的时候的一个行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFlowable</span><span class="params">()</span> &#123;</span><br><span class="line">    Flowable&lt;Integer&gt; flowable = Flowable.just(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Disposable</span> <span class="variable">subscribe</span> <span class="operator">=</span> flowable.subscribe(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样执行后，我们就会发现，我们声明了他只需要简单的打印一下拿到的数据就可以了，运行之后我们也拿到了对应的结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>至此一个简易的 RxJava 的模型就已经完成了，他可以说是 RxJava 的全部内容，也可以说是冰山一角，剩下的中间操作、监听者的配置以及<code>Disposable</code>则是接下来需要深入理解的东西。</p><p>代码地址:<a href="https://github.com/dgjungleP/100days-code-round1">100daysCode</a></p>]]></content>
      
      
      <categories>
          
          <category> 挑战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挑战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2023/03/28/test-layout/"/>
      <url>/2023/03/28/test-layout/</url>
      
        <content type="html"><![CDATA[<p>现在 从这里开始启程吧</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
