<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>In Jungle</title>
  <icon>https://dgjunglep.github.io/icon.png</icon>
  <subtitle>没有什么是生来就有的</subtitle>
  <link href="https://dgjunglep.github.io/atom.xml" rel="self"/>
  
  <link href="https://dgjunglep.github.io/"/>
  <updated>2023-05-10T23:40:12.460Z</updated>
  <id>https://dgjunglep.github.io/</id>
  
  <author>
    <name>Jungle Deng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SPI机制浅读:Dubbo SPI</title>
    <link href="https://dgjunglep.github.io/2023/04/19/100dayscode-21/"/>
    <id>https://dgjunglep.github.io/2023/04/19/100dayscode-21/</id>
    <published>2023-04-19T21:34:24.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;相关代码地址:&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="知识点" scheme="https://dgjunglep.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="spi" scheme="https://dgjunglep.github.io/tags/spi/"/>
    
    <category term="dubbo" scheme="https://dgjunglep.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day20 Dubbo接入浅试</title>
    <link href="https://dgjunglep.github.io/2023/04/18/100dayscode-20/"/>
    <id>https://dgjunglep.github.io/2023/04/18/100dayscode-20/</id>
    <published>2023-04-18T21:12:26.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前面我们讲过了很多的&lt;code&gt;SPI&lt;/code&gt;的使用，其实 RPC 就是其集大成者，在继续探索之前，我们先来看一下&lt;br&gt;&lt;code&gt;Dubbo&lt;/code&gt;利用&lt;code&gt;SPI&lt;/code&gt;如何快速的帮助我们创建一个 RPC</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="dubbo" scheme="https://dgjunglep.github.io/tags/dubbo/"/>
    
    <category term="rpc" scheme="https://dgjunglep.github.io/tags/rpc/"/>
    
    <category term="demo" scheme="https://dgjunglep.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day19 SPI机制浅读:Spring SPI</title>
    <link href="https://dgjunglep.github.io/2023/04/17/100dayscode-19/"/>
    <id>https://dgjunglep.github.io/2023/04/17/100dayscode-19/</id>
    <published>2023-04-17T17:42:51.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前我们一起看来一下 Java 原生是如何支持&lt;code&gt;SPI&lt;/code&gt;的，那么更进一步，我们来看一下我们常用的&lt;br&gt;Spring</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="spi" scheme="https://dgjunglep.github.io/tags/spi/"/>
    
    <category term="spring" scheme="https://dgjunglep.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day18 双亲委派和打破双亲委派</title>
    <link href="https://dgjunglep.github.io/2023/04/16/100dayscode-18/"/>
    <id>https://dgjunglep.github.io/2023/04/16/100dayscode-18/</id>
    <published>2023-04-16T17:42:48.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;紧接着上次说到的这个线程上下文类加载器，我们看一下他在`ServceLoader`中到底做了些什么事情
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;使用Thread-currentThread-getContextClassLoader&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="spi" scheme="https://dgjunglep.github.io/tags/spi/"/>
    
    <category term="java" scheme="https://dgjunglep.github.io/tags/java/"/>
    
    <category term="类加载器" scheme="https://dgjunglep.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
    <category term="jvm" scheme="https://dgjunglep.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day17 SPI机制浅读:Java SPI</title>
    <link href="https://dgjunglep.github.io/2023/04/15/100dayscode-17/"/>
    <id>https://dgjunglep.github.io/2023/04/15/100dayscode-17/</id>
    <published>2023-04-15T17:41:46.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;在开始了解RPC的时候，我们常常会学会去用到`SpringCloud`和`Dubbo`,那么就必不可少的会去接触到
`SPI`，一个熟悉而又陌生的概念，那么今天我们就先来看看这个神秘的`SPI`到底是什么，它能给我们带来什
么有意思的东西
&lt;/code&gt;&lt;/</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="spi" scheme="https://dgjunglep.github.io/tags/spi/"/>
    
    <category term="java" scheme="https://dgjunglep.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day16 Mybatis 插件:敏感数据脱敏插件（三）</title>
    <link href="https://dgjunglep.github.io/2023/04/14/100dayscode-16/"/>
    <id>https://dgjunglep.github.io/2023/04/14/100dayscode-16/</id>
    <published>2023-04-14T21:59:23.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;上会我们已经将整体的插件模板创建完成了，那么今天我们继续来完成最后的策略实现，以及一些简单的优化
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;策略类实现&quot;&gt;&lt;a href=&quot;#策略类实现&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="mybatis" scheme="https://dgjunglep.github.io/tags/mybatis/"/>
    
    <category term="插件" scheme="https://dgjunglep.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day15 Mybatis 插件:敏感数据脱敏插件（二）</title>
    <link href="https://dgjunglep.github.io/2023/04/13/100dayscode-15/"/>
    <id>https://dgjunglep.github.io/2023/04/13/100dayscode-15/</id>
    <published>2023-04-13T23:54:58.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;上次我们已经定义好了插件的一些大致实现方案，那么接下来我们就将上诉方案进行整合，来完成我们的数据
脱敏插件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;整合&quot;&gt;&lt;a href=&quot;#整合&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="mybatis" scheme="https://dgjunglep.github.io/tags/mybatis/"/>
    
    <category term="插件" scheme="https://dgjunglep.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day14 Mybatis 插件:敏感数据脱敏插件（一）</title>
    <link href="https://dgjunglep.github.io/2023/04/12/100dayscode-14/"/>
    <id>https://dgjunglep.github.io/2023/04/12/100dayscode-14/</id>
    <published>2023-04-12T22:05:58.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;为了巩固之前对Mybatis插件的学习，同时也想到了一个之前经常遇到的问题，数据库的数据需要脱敏（如用户
手机号，密码等），那么今天我们就来一个创建一个Mybatis的数据脱敏插件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;数据脱敏插件&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="mybatis" scheme="https://dgjunglep.github.io/tags/mybatis/"/>
    
    <category term="插件" scheme="https://dgjunglep.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day13 Mybatis 插件入门</title>
    <link href="https://dgjunglep.github.io/2023/04/11/100dayscode-13/"/>
    <id>https://dgjunglep.github.io/2023/04/11/100dayscode-13/</id>
    <published>2023-04-11T21:17:59.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在做项目的时候，由于需要为实体类生成对应的雪花 ID，但是又不可能每次在创建实例的时候再去&lt;br&gt;调用方法，所以，想到了能不能借助于 Myabtis</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="mybatis" scheme="https://dgjunglep.github.io/tags/mybatis/"/>
    
    <category term="插件" scheme="https://dgjunglep.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day12 再看RxJava:转化Flowable（三）</title>
    <link href="https://dgjunglep.github.io/2023/04/10/100dayscode-12/"/>
    <id>https://dgjunglep.github.io/2023/04/10/100dayscode-12/</id>
    <published>2023-04-10T11:36:19.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;在上次的实例中，我们已经使用过了`retry`,那么我们今天来看一下这个操作到底在帮助我们做些什么事情
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们很轻易的就能创造一个错误&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day11 再看RxJava:实践:JClient（二）</title>
    <link href="https://dgjunglep.github.io/2023/04/09/100dayscode-11/"/>
    <id>https://dgjunglep.github.io/2023/04/09/100dayscode-11/</id>
    <published>2023-04-09T11:36:17.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;实现：-失败重试&quot;&gt;&lt;a href=&quot;#实现：-失败重试&quot; class=&quot;headerlink&quot; title=&quot;实现： 失败重试&quot;&gt;&lt;/a&gt;实现：</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
    <category term="实践" scheme="https://dgjunglep.github.io/tags/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="jclient" scheme="https://dgjunglep.github.io/tags/jclient/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day10 再看RxJava:实践:JClient（一）</title>
    <link href="https://dgjunglep.github.io/2023/04/08/100dayscode-10/"/>
    <id>https://dgjunglep.github.io/2023/04/08/100dayscode-10/</id>
    <published>2023-04-08T11:36:12.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;经过前面的学习，我们已经了解到一些`RxJava`的使用方式，今天我们在这里借助一个小小的案例来综合使用
一下我们学到的知识，首先这里我们会使用到`Vert.x`的`RxJava`实现
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;案例&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
    <category term="实践" scheme="https://dgjunglep.github.io/tags/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="jclient" scheme="https://dgjunglep.github.io/tags/jclient/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day09 再看RxJava:转化Flowable（二）</title>
    <link href="https://dgjunglep.github.io/2023/04/07/100dayscode-9/"/>
    <id>https://dgjunglep.github.io/2023/04/07/100dayscode-9/</id>
    <published>2023-04-07T22:29:35.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;在之前的操作中，我们经常需要为每一个Flowable进行模拟延迟的时候，都使用了一个`map`的操作符，那么今
天，我们就来看一下这个map到底可以为我们做些什么。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot;</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day08 再看RxJava:转化Flowable（一）</title>
    <link href="https://dgjunglep.github.io/2023/04/06/100dayscode-8/"/>
    <id>https://dgjunglep.github.io/2023/04/06/100dayscode-8/</id>
    <published>2023-04-06T22:01:55.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;在学习异步和并行处理之前，由于业务原因，我同时又遇到了一个问题，
当我有很多数据要进行处理时，由于数据量过大，内存可能无法支持到这么多数据，这个时候我需要对数据
进行分组批处理，那么这个时候`RxJava`能够怎么样轻易的帮助我们完成这项工作呢
&lt;/code</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day07 再看RxJava:创建Flowable（四）</title>
    <link href="https://dgjunglep.github.io/2023/04/05/100dayscode-7/"/>
    <id>https://dgjunglep.github.io/2023/04/05/100dayscode-7/</id>
    <published>2023-04-05T21:27:31.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;上一次我浅用了以下merge方法，它确实可以把多个`Flowable`聚合在一起，但是却不能满足我们预设的要求，
将多个耗时操作异步执行，并且，并利用其结果去组装我们想要的下游数据，那么接下来，我们再看一下另一
个能够组合`Flowable`的创建方式
&lt;/</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day06 再看RxJava:创建Flowable（三）</title>
    <link href="https://dgjunglep.github.io/2023/04/04/100dayscode-6/"/>
    <id>https://dgjunglep.github.io/2023/04/04/100dayscode-6/</id>
    <published>2023-04-04T22:07:26.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;之前我们的创建都是围绕着一个`Flowable`来进行的，那么我们可以将多个`Flowable`组合在一起么，
例如我们日常工作中的一种场景，当我们要去组装一条数据的时候，由于历史或者设计原因，我们不得
不进行多次网络调用或者计较耗时的操作，但是每个操作基本</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day05 再看RxJava:创建Flowable（二）</title>
    <link href="https://dgjunglep.github.io/2023/04/03/100dayscode-5/"/>
    <id>https://dgjunglep.github.io/2023/04/03/100dayscode-5/</id>
    <published>2023-04-03T21:03:08.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;上次我们制作了简单的`心跳包`，那除了`心跳`以外我们还能做些什么呢。在对创建方法的探索中，我们又发现了一个带有
类似`interval`方法签名的一个方法
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;timer&quot;&gt;&lt;a href=&quot;#timer&quot;</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day04 再看RxJava:创建Flowable（一）</title>
    <link href="https://dgjunglep.github.io/2023/04/02/100dayscode-4/"/>
    <id>https://dgjunglep.github.io/2023/04/02/100dayscode-4/</id>
    <published>2023-04-02T21:01:05.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;pre&gt;&lt;code&gt;在探索能够用已学习的知识能够用来做些什么东西的时候，本来想着来制作一个`心跳器`的，却发现还没有很好的办法去创建
一个`心跳`，本着对于心跳的理解，所以心跳信号应该是用`Flowable`这种消息发布体来进行，提供所以，又得去探索一下
关于`Flowable</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day03 再看RxJava:Scheduler</title>
    <link href="https://dgjunglep.github.io/2023/04/01/100dayscode-3/"/>
    <id>https://dgjunglep.github.io/2023/04/01/100dayscode-3/</id>
    <published>2023-04-01T21:27:52.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;经过昨天的学习，我们认识到了可以如何去消费我们&lt;code&gt;Flowable&lt;/code&gt;创建出来的消息，那么现在存在一个疑问，那么它是在那个线程去执行的呢。我们用一个新的方式&lt;code&gt;range&lt;/code&gt;去创建一个例子尝试一下&lt;/p&gt;
&lt;figure</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>100DaysCode-Day02 再看RxJava:Subscribe</title>
    <link href="https://dgjunglep.github.io/2023/03/31/100dayscode-2/"/>
    <id>https://dgjunglep.github.io/2023/03/31/100dayscode-2/</id>
    <published>2023-03-31T22:17:04.000Z</published>
    <updated>2023-05-10T23:40:12.460Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在昨天的使用我们，我们是用了最简单的 RxJava 的模型，在这里我们回顾一下我们是如何订阅了消息&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/categories/%E6%8C%91%E6%88%98/"/>
    
    
    <category term="挑战" scheme="https://dgjunglep.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
    <category term="rxjava" scheme="https://dgjunglep.github.io/tags/rxjava/"/>
    
    <category term="小知识" scheme="https://dgjunglep.github.io/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
